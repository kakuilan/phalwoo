<?php
/**
 * Copyright (c) 2017 LKK/lianq.net All rights reserved
 * User: kakuilan@163.com
 * Date: 17-9-4
 * Time: 下午7:54
 * Desc: -MY服务器
 */


namespace Tests\Server;

use Lkk\Helpers\CommonHelper;
use Phalcon\Mvc\Micro;
use Lkk\Phalwoo\Server\SwooleServer;
use Lkk\Phalwoo\Phalcon\Di as PwDi;
use Lkk\Phalwoo\Phalcon\Http\Request as PwRequest;
use Lkk\Phalwoo\Phalcon\Http\Response as PwResponse;
use Lkk\Phalwoo\Phalcon\Http\Response\Cookies as PwCookies;
use Lkk\Phalwoo\Phalcon\Session\Adapter\Redis as PwSession;
use Lkk\Phalwoo\Server\DenyUserAgent;
use Phalcon\Crypt as PhCrypt;
use Lkk\Phalwoo\Server\Component\Log\SwooleLogger;
use Lkk\Phalwoo\Server\Component\Log\Handler\AsyncStreamHandler;
use Lkk\Phalwoo\Server\Component\Pool\PoolManager;
use Lkk\Phalwoo\Server\Concurrent\Promise;
use Lkk\Phalwoo\Server\Component\Client\Mysql;

class MyServer extends SwooleServer {

    protected $logger;

    public function __construct(array $vars = []) {
        parent::__construct($vars);

    }


    /**
     * 获取实例[子类必须重写]
     * @param array $vars
     * @return mixed
     */
    public static function instance(array $vars = []) {
        if(is_null(parent::$instance) || !is_object(parent::$instance)) {
            parent::$instance = new self($vars);
        }

        return parent::$instance;
    }


    /**
     * 销毁实例化对象
     */
    public static function destroy() {
        parent::$instance = null;
        self::$_instance = null;
    }


    public function initServer() {
        //所有全局变量应在swoole事件绑定前设置好
        //否则swoole事件回调时进程间不共享变量
        //TODO 添加自定义的全局变量

        //TODO 读取单独的配置
        $this->setPoolManager($this->conf['pool']);

        parent::initServer();

        $logger = self::getLogger();
        $logger->getDefaultHandler()->bindSwooleCloseEvent();

        return $this;
    }


    public function startServer() {
        //TODO 自定义逻辑

        parent::startServer();

        return $this;
    }



    public static function onSwooleStart($serv) {
        parent::onSwooleStart($serv); // TODO: Change the autogenerated stub

    }


    public static function onSwooleWorkerStart($serv, $workerId) {
        parent::onSwooleWorkerStart($serv, $workerId);

        if($workerId==0) {
            self::getPoolManager()->initAll();
        }

    }


    public static function onSwooleRequest($request, $response) {
        $sendRes = parent::onSwooleRequest($request, $response);
        if(!$sendRes) return $sendRes;

        //协程
        Promise::co(function() use ($request, $response){
            yield MyServer::doSwooleRequest($request, $response);
        });

        return true;
    }



    public static function doSwooleRequest($request, $response) {
        $conf = self::getProperty('conf');
        $response->header('X-Powered-By', ($conf['server_name'] ?? 'LkkServ'));
        $response->header('Server', ($conf['server_name'] ?? 'LkkServ'));
        //var_dump('swoole-request:------------', $request);

        $logger = self::getLogger();
        $logger->info('request:', [
            'header' => $request->header ?? '',
            'server' => $request->server ?? '',
            'get' => $request->get ?? '',
            'post' => $request->post ?? '',
        ]);

        //redis连接池测试
        $redisPool = self::getPoolManager()->get('redis_master');
        $res = yield $redisPool->pop()->set('abcd', time());
        var_dump('redis_master', $res);

        //mysql连接池
        $mysqlPool = self::getPoolManager()->get('mysql_master');
        $sql = "show databases";
        $res = yield $mysqlPool->pop()->execute($sql, false);
        var_dump('mysql_master', $res);

        //debug_print_backtrace();

        $di = new PwDi();
        $app = new Micro($di);

        $di->setShared('boot', self::instance());
        $di->setShared('swooleRequest', $request);
        $di->setShared('swooleResponse', $response);

        //加密组件放在cookie和denAgent前面
        $crypt = new PhCrypt();
        $crypt->setKey('hello');
        $crypt->setPadding(PhCrypt::PADDING_ZERO);
        $di->setShared('crypt', $crypt);

        //TODO 检查客户端,防止爬虫和压力测试
        $denAgent = new DenyUserAgent();
        $denAgent->setRequest($request);
        $denAgent->setDI($di);
        $denAgent->setAllowBench(true);
        $agentUuid = $denAgent->getAgentUuid();
        $di->setShared('denAgent', $denAgent);

        $chkAgen = $denAgent->checkAll();
        //var_dump('$chkAgen', $chkAgen, $denAgent->error);
        if(!$chkAgen) {
            return $response->end();
        }

        $di->setShared('request', function () use ($di) {
            $request = new PwRequest();
            $request->setDi($di);
            return $request;
        });

        $di->setShared('response', function () use ($di) {
            $response = new PwResponse();
            $response->setDi($di);
            return $response;
        });

        $di->setShared('cookies', function () use ($di) {
            $cookies = new PwCookies();
            $cookies->useEncryption(false);
            $cookies->setDI($di);
            return $cookies;
        });

        $cookConf = [
            'domain'    => '127.0.0.1',   //Cookie 作用域
            'path'      => '/',         //Cookie 作用路径
            'lifetime'  => 0,           //Cookie 生命周期, 0为随浏览器进程
            'pre'       => 'ks_',       //Cookie 前缀
        ];
        $sessConf = [
            'host'              => 'localhost',
            'port'              => 6379,
            'auth'              => null,
            'lifetime'          => '900', //秒,redis SESSION有效期
            'cookie_lifetime'   => 0, //秒,cookie PHPSESSID有效期,0为随浏览器
            'cookie_secure'     => true,
            'uniqueId'          => '_lkksys_', //隔离不同应用的会话数据
            'prefix'            => 'SESSION:',
            'name'              => null,
            'index'             => 1, //redis库号
            'cookie'            => $cookConf,
        ];

        //注意下面这几个方法顺序不能改
        $session = new PwSession($sessConf);
        $session->setDI($di);
        $di->setShared('session', $session);
        $session->start();

        $di->setShared('app', $app);
        $app->setDI($di);

        $app->get(
            "*",
            function () use($app, $di) {
                $onlineNum = $di->getShared('session')->getSiteOnlineNum();
                $msg = 'Weclcom Phalcon Swoole! [*]' .date('Y-m-d H:i:s').' onlineNum:'.$onlineNum;
                return $msg;
            }
        );
        $app->get(
            "/",
            function () use($app, $session) {
                $onlineNum = $session->getSiteOnlineNum();
                $msg = 'Weclcom Phalcon Swoole! [/]' .date('Y-m-d H:i:s').' onlineNum:'. $onlineNum;
                return $msg;
            }
        );
        $app->get(
            "/index",
            function () use($app, $di) {
                $onlineNum = $di->getShared('session')->getSiteOnlineNum();
                $msg = '[index]! ' .date('Y-m-d H:i:s').' onlineNum:'.$onlineNum;
                return $msg;
            }
        );
        $app->notFound(function() use($app, $di) {
            $onlineNum = $di->getShared('session')->getSiteOnlineNum();
            $msg = 'Weclcom Phalcon Swoole! not found!' .date('Y-m-d H:i:s').' onlineNum:'.$onlineNum;
            return $msg;
        });

        $ret = $app->handle($request->server['request_uri']);
        if ($ret instanceof PwResponse) {
            $ret->send();
            $response->end($ret->getContent());
        } else if (is_string($ret)) {
            $response->end($ret);
        } else {
            $response->end();
        }
        unset($di, $app);

        self::afterSwooleResponse($request, $response);

        return true;
    }


    public static function afterSwooleResponse($request, $response) {
        //TODO

    }



    public static function onSwooleClose($serv, $fd, $fromId) {
        parent::onSwooleClose($serv, $fd, $fromId);

        //随机写日志
        if(mt_rand(0, 2)==1 || true) {
            $di = SwooleServer::getServerDi();
            $eventManager = $di->get('eventsManager');
            $eventManager->fire('SwooleServer:onSwooleClose', self::instance());
        }

    }



    public static function onSwooleWorkerStop($serv, $workerId) {
        parent::onSwooleWorkerStop($serv, $workerId);

    }


    public static function onSwooleManagerStop($serv) {
        parent::onSwooleManagerStop($serv);

    }


    public static function onSwooleShutdown($serv) {
        parent::onSwooleShutdown($serv);

    }


}